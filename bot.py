import os
import sqlite3
import logging
import json
import urllib.parse
import time
import asyncio
from datetime import datetime, timedelta
from typing import Dict, Any
from dotenv import load_dotenv
from aiohttp import web
import aiohttp_cors

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_PATH = os.getenv("DATABASE_PATH", "finance_tracker.db")

class FinanceTracker:
    def __init__(self, db_path: str = None):
        self.db_path = db_path or DATABASE_PATH
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                type TEXT NOT NULL,
                amount REAL NOT NULL,
                category TEXT NOT NULL,
                description TEXT,
                date TEXT NOT NULL
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def add_transaction(self, user_id: int, transaction_type: str, amount: float, 
                       category: str, description: str = ""):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        if amount > 1000000:  # –õ–∏–º–∏—Ç –Ω–∞ —Å—É–º–º—É
            raise ValueError("–°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è")
        if transaction_type not in ['income', 'expense']:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: user_id={user_id}, type={transaction_type}, amount={amount}, category={category}")
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        date_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        cursor.execute('''
            INSERT INTO transactions (user_id, type, amount, category, description, date)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, transaction_type, amount, category, description, date_str))
        
        conn.commit()
        conn.close()
        logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    def get_user_balance(self, user_id: int) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT type, SUM(amount) FROM transactions 
            WHERE user_id = ? GROUP BY type
        ''', (user_id,))
        
        results = cursor.fetchall()
        conn.close()
        
        balance = 0
        for transaction_type, amount in results:
            if transaction_type == "income":
                balance += amount
            else:
                balance -= amount
        
        logger.debug(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {balance}")
        return balance
    
    def get_monthly_stats(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –º–µ—Å—è—Ü"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        month_start = datetime.now().replace(day=1).strftime("%Y-%m-%d")
        
        cursor.execute('''
            SELECT type, category, SUM(amount) FROM transactions 
            WHERE user_id = ? AND date >= ? 
            GROUP BY type, category
        ''', (user_id, month_start))
        
        results = cursor.fetchall()
        conn.close()
        
        stats = {"income": {}, "expense": {}, "total_income": 0, "total_expense": 0}
        
        for transaction_type, category, amount in results:
            if transaction_type == "income":
                stats["income"][category] = amount
                stats["total_income"] += amount
            else:
                stats["expense"][category] = amount
                stats["total_expense"] += amount
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω return
        return stats
    
    def get_user_transactions(self, user_id: int, limit: int = 50) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT type, amount, category, description, date 
            FROM transactions 
            WHERE user_id = ? 
            ORDER BY date DESC 
            LIMIT ?
        ''', (user_id, limit))
        
        results = cursor.fetchall()
        conn.close()
        
        transactions = []
        for row in results:
            transactions.append({
                'type': row[0],
                'amount': row[1],
                'category': row[2],
                'description': row[3],
                'date': row[4]
            })
        
        return transactions

    def get_user_stats(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        balance = self.get_user_balance(user_id)
        monthly_stats = self.get_monthly_stats(user_id)
        transactions = self.get_user_transactions(user_id, 10)
        
        result = {
            'balance': balance,
            'monthlyStats': monthly_stats,
            'recentTransactions': transactions
        }
        
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: balance={balance}, transactions_count={len(transactions)}")
        return result

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞
tracker = FinanceTracker()

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞
EXPENSE_CATEGORIES = ["–ö–æ—Ñ–µ", "–ó–∞–≤–µ–¥–µ–Ω–∏–µ", "–û–¥–µ–∂–¥–∞", "–ö–æ—Å–º–µ—Ç–∏–∫–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ó–¥–æ—Ä–æ–≤—å–µ"]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def get_main_keyboard(user_id: int):
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"""
    webapp_url = get_webapp_url_with_data(user_id)
    
    logger.info(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.info(f"üåê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL: {webapp_url}")
    
    keyboard = [
        [KeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=webapp_url))],
        [KeyboardButton("üìä –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥"), KeyboardButton("üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")],
        [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_webapp_url_with_data(user_id: int) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        base_url = os.getenv("WEBAPP_URL", "https://your-username.github.io/your-repo-name/webapp.html")
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ URL —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        user_stats = tracker.get_user_stats(user_id)
        
        logger.debug(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è URL: {user_stats}")
        
        balance = user_stats.get('balance', 0)
        monthly_stats = user_stats.get('monthlyStats', {})
        
        if monthly_stats is None:
            monthly_stats = {"income": {}, "expense": {}, "total_income": 0, "total_expense": 0}
        
        total_income = monthly_stats.get('total_income', 0)
        total_expense = monthly_stats.get('total_expense', 0)
        expense_categories = monthly_stats.get('expense', {})
        
        data = {
            'balance': balance,
            'income': total_income,
            'expense': total_expense,
            'expenses': json.dumps(expense_categories),
            'timestamp': int(time.time()),
            'user_id': user_id
        }
        
        query_string = urllib.parse.urlencode(data)
        final_url = f"{base_url}?{query_string}"
        
        logger.info(f"–°–æ–∑–¥–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π URL: {final_url}")
        return final_url
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è URL —Å –¥–∞–Ω–Ω—ã–º–∏: {e}")
        return os.getenv("WEBAPP_URL", "https://your-username.github.io/your-repo-name/webapp.html")

def get_category_keyboard(transaction_type: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    categories = EXPENSE_CATEGORIES
    keyboard = [[KeyboardButton(cat)] for cat in categories]
    keyboard.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = update.effective_user.id
    user_states[user_id] = {"state": "main"}
    
    welcome_text = """
üè¶ *–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä*

–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!
"""
    
    await update.message.reply_text(
        welcome_text,
        parse_mode="Markdown",
        reply_markup=get_main_keyboard(user_id)
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """
üìñ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*

üöÄ *–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:*
–ù–∞–∂–º–∏ "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

*–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:*
1. –ù–∞–∂–º–∏ "üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥" –∏–ª–∏ "üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"
2. –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤)
3. –í–≤–µ–¥–∏ —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 1500 –∑–∞ –æ–±–µ–¥)

*–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:*
‚Ä¢ "üìä –ë–∞–ª–∞–Ω—Å" - —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
‚Ä¢ "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" - –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü

*–ü—Ä–∏–º–µ—Ä—ã –≤–≤–æ–¥–∞ —Å—É–º–º—ã:*
‚Ä¢ `1500`
‚Ä¢ `1500 –∑–∞—Ä–ø–ª–∞—Ç–∞`
‚Ä¢ `500 –æ–±–µ–¥ –≤ –∫–∞—Ñ–µ`
"""
    
    await update.message.reply_text(help_text, parse_mode="Markdown")

async def refresh_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    user_id = update.effective_user.id
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /refresh –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    user_stats = tracker.get_user_stats(user_id)
    balance = user_stats.get('balance', 0)
    
    await update.message.reply_text(
        f"üîÑ *–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É!*\n\nüí∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: *{balance:.2f} ‚ÇΩ*",
        parse_mode="Markdown",
        reply_markup=get_main_keyboard(user_id)
    )

async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App"""
    try:
        user_id = update.effective_user.id
        data = json.loads(update.effective_message.web_app_data.data)
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Web App –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {data}")
        
        # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if 'type' not in data or 'amount' not in data or 'category' not in data:
            raise ValueError("–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ Web App
        tracker.add_transaction(
            user_id=user_id,
            transaction_type=data['type'],
            amount=float(data['amount']),  # ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ float
            category=data['category'],
            description=data.get('description', '')
        )
        
        new_balance = tracker.get_user_balance(user_id)
        
        transaction_type_text = "–î–æ—Ö–æ–¥" if data['type'] == 'income' else "–†–∞—Å—Ö–æ–¥"
        await update.message.reply_text(
            f"‚úÖ {transaction_type_text} –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!\n\n"
            f"üí∞ {data['amount']:.2f} ‚ÇΩ\n"
            f"üìÇ {data['category']}\n"
            f"üìù {data.get('description', '')}\n\n"
            f"üîÑ *–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f} ‚ÇΩ*",
            parse_mode="Markdown",
            reply_markup=get_main_keyboard(user_id)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Web App –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if user_id not in user_states:
        user_states[user_id] = {"state": "main"}
    
    state = user_states[user_id]["state"]
    
    if text == "üîô –ù–∞–∑–∞–¥":
        user_states[user_id] = {"state": "main"}
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard(user_id)
        )
        return
    
    if state == "main":
        if text == "üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥":
            user_states[user_id] = {"state": "enter_income_amount"}
            await update.message.reply_text(
                "üí∞ –í–≤–µ–¥–∏ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
            )
            
        elif text == "üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥":
            user_states[user_id] = {"state": "select_expense_category"}
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:",
                reply_markup=get_category_keyboard("expense")
            )
            
        elif text == "üìä –ë–∞–ª–∞–Ω—Å":
            balance = tracker.get_user_balance(user_id)
            balance_text = f"üí∞ *–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:* {balance:.2f} ‚ÇΩ"
            
            if balance > 0:
                balance_text += " ‚úÖ"
            elif balance < 0:
                balance_text += " ‚ùå"
            else:
                balance_text += " ‚öñÔ∏è"
                
            await update.message.reply_text(balance_text, parse_mode="Markdown")
            
        elif text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            stats = tracker.get_monthly_stats(user_id)
            
            stats_text = "üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü:*\n\n"
            
            if stats["total_income"] > 0:
                stats_text += f"üí∞ *–î–æ—Ö–æ–¥—ã:* {stats['total_income']:.2f} ‚ÇΩ\n"
                for category, amount in stats["income"].items():
                    stats_text += f"  ‚Ä¢ {category}: {amount:.2f} ‚ÇΩ\n"
                stats_text += "\n"
            
            if stats["total_expense"] > 0:
                stats_text += f"üí∏ *–†–∞—Å—Ö–æ–¥—ã:* {stats['total_expense']:.2f} ‚ÇΩ\n"
                for category, amount in stats["expense"].items():
                    stats_text += f"  ‚Ä¢ {category}: {amount:.2f} ‚ÇΩ\n"
                stats_text += "\n"
            
            difference = stats["total_income"] - stats["total_expense"]
            stats_text += f"üìä *–†–∞–∑–Ω–∏—Ü–∞:* {difference:.2f} ‚ÇΩ"
            
            if difference > 0:
                stats_text += " ‚úÖ"
            elif difference < 0:
                stats_text += " ‚ùå"
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º get_main_keyboard –≤–º–µ—Å—Ç–æ get_dynamic_keyboard
            await update.message.reply_text(stats_text, parse_mode="Markdown", reply_markup=get_main_keyboard(user_id))
            
        elif text == "‚ùì –ü–æ–º–æ—â—å":
            await help_command(update, context)
    
    elif state == "select_expense_category":
        if text in EXPENSE_CATEGORIES:
            user_states[user_id] = {"state": "enter_expense_amount", "category": text}
            await update.message.reply_text(
                f"üí∏ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{text}*\n\n–í–≤–µ–¥–∏ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:",
                parse_mode="Markdown",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
            )
    
    elif state == "enter_income_amount":
        try:
            parts = text.split(maxsplit=1)
            amount = float(parts[0])
            description = parts[1] if len(parts) > 1 else ""
            
            tracker.add_transaction(user_id, "income", amount, "–î–æ—Ö–æ–¥", description)
            
            new_balance = tracker.get_user_balance(user_id)
            logger.info(f"üîÑ –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞: –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å = {new_balance}")
            
            await update.message.reply_text(
                f"‚úÖ –î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüí∞ *{amount:.2f} ‚ÇΩ*\nüìù {description}",
                parse_mode="Markdown",
                reply_markup=get_main_keyboard(user_id)
            )
            user_states[user_id] = {"state": "main"}
            
        except ValueError as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n–ü—Ä–∏–º–µ—Ä: `1500` –∏–ª–∏ `1500 –æ–ø–∏—Å–∞–Ω–∏–µ`",
                parse_mode="Markdown"
            )
    
    elif state == "enter_expense_amount":
        try:
            parts = text.split(maxsplit=1)
            amount = float(parts[0])
            description = parts[1] if len(parts) > 1 else ""
            
            category = user_states[user_id]["category"]
            tracker.add_transaction(user_id, "expense", amount, category, description)
            
            await update.message.reply_text(
                f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüí∏ *{amount:.2f} ‚ÇΩ*\nüìÇ {category}\nüìù {description}",
                parse_mode="Markdown",
                reply_markup=get_main_keyboard(user_id)
            )
            user_states[user_id] = {"state": "main"}
            
        except ValueError as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n–ü—Ä–∏–º–µ—Ä: `500` –∏–ª–∏ `500 –æ–±–µ–¥`",
                parse_mode="Markdown"
            )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not BOT_TOKEN or BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ: BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–æ—Ç_BotFather")
        return
    
    print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("refresh", refresh_command))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data))
    application.add_handler(MessageHandler(filters.TEXT, handle_message))
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_PATH}")
    print("üì® –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()