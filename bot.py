import os
import sqlite3
import logging
import json
from datetime import datetime, timedelta
from typing import Dict, Any
from dotenv import load_dotenv
from aiohttp import web, web_request
import aiohttp_cors
from aiohttp.web import Application as WebApplication

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG,  # –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_PATH = os.getenv("DATABASE_PATH", "finance_tracker.db")

class FinanceTracker:
    def __init__(self, db_path: str = None):
        self.db_path = db_path or DATABASE_PATH
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                type TEXT NOT NULL,
                amount REAL NOT NULL,
                category TEXT NOT NULL,
                description TEXT,
                date TEXT NOT NULL
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def add_transaction(self, user_id: int, transaction_type: str, amount: float, 
                       category: str, description: str = ""):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: user_id={user_id}, type={transaction_type}, amount={amount}, category={category}")
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        date_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        cursor.execute('''
            INSERT INTO transactions (user_id, type, amount, category, description, date)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, transaction_type, amount, category, description, date_str))
        
        conn.commit()
        conn.close()
        logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    def get_user_balance(self, user_id: int) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT type, SUM(amount) FROM transactions 
            WHERE user_id = ? GROUP BY type
        ''', (user_id,))
        
        results = cursor.fetchall()
        conn.close()
        
        balance = 0
        for transaction_type, amount in results:
            if transaction_type == "income":
                balance += amount
            else:
                balance -= amount
        
        logger.debug(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {balance}")
        return balance
    
    def get_monthly_stats(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –º–µ—Å—è—Ü"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        month_start = datetime.now().replace(day=1).strftime("%Y-%m-%d")
        
        cursor.execute('''
            SELECT type, category, SUM(amount) FROM transactions 
            WHERE user_id = ? AND date >= ? 
            GROUP BY type, category
        ''', (user_id, month_start))
        
        results = cursor.fetchall()
        conn.close()
        
        stats = {"income": {}, "expense": {}, "total_income": 0, "total_expense": 0}
        
        for transaction_type, category, amount in results:
            if transaction_type == "income":
                stats["income"][category] = amount
                stats["total_income"] += amount
            else:
                stats["expense"][category] = amount
                stats["total_expense"] += amount
        
    def get_user_transactions(self, user_id: int, limit: int = 50) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT type, amount, category, description, date 
            FROM transactions 
            WHERE user_id = ? 
            ORDER BY date DESC 
            LIMIT ?
        ''', (user_id, limit))
        
        results = cursor.fetchall()
        conn.close()
        
        transactions = []
        for row in results:
            transactions.append({
                'type': row[0],
                'amount': row[1],
                'category': row[2],
                'description': row[3],
                'date': row[4]
            })
        
        return transactions

    def get_user_stats(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        balance = self.get_user_balance(user_id)
        monthly_stats = self.get_monthly_stats(user_id)
        transactions = self.get_user_transactions(user_id, 10)
        
        result = {
            'balance': balance,
            'monthlyStats': monthly_stats,
            'recentTransactions': transactions
        }
        
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: balance={balance}, transactions_count={len(transactions)}")
        return result

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞
tracker = FinanceTracker()

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞
EXPENSE_CATEGORIES = ["–ö–æ—Ñ–µ", "–ó–∞–≤–µ–¥–µ–Ω–∏–µ", "–û–¥–µ–∂–¥–∞", "–ö–æ—Å–º–µ—Ç–∏–∫–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ó–¥–æ—Ä–æ–≤—å–µ"]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def get_main_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å Web App"""
    # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π GitHub Pages URL
    webapp_url = os.getenv("WEBAPP_URL", "https://your-username.github.io/your-repo-name/webapp.html")
    
    keyboard = [
        [KeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=webapp_url))],
        [KeyboardButton("üìä –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥"), KeyboardButton("üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")],
        [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_category_keyboard(transaction_type: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    categories = EXPENSE_CATEGORIES
    keyboard = [[KeyboardButton(cat)] for cat in categories]
    keyboard.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = update.effective_user.id
    user_states[user_id] = {"state": "main"}
    
    welcome_text = """
üè¶ *–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä*

–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!
"""
    
    await update.message.reply_text(
        welcome_text,
        parse_mode="Markdown",
        reply_markup=get_main_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """
üìñ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*

üöÄ *–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:*
–ù–∞–∂–º–∏ "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

*–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:*
1. –ù–∞–∂–º–∏ "üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥" –∏–ª–∏ "üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"
2. –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤)
3. –í–≤–µ–¥–∏ —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 1500 –∑–∞ –æ–±–µ–¥)

*–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:*
‚Ä¢ "üìä –ë–∞–ª–∞–Ω—Å" - —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
‚Ä¢ "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" - –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü

*–ü—Ä–∏–º–µ—Ä—ã –≤–≤–æ–¥–∞ —Å—É–º–º—ã:*
‚Ä¢ `1500`
‚Ä¢ `1500 –∑–∞—Ä–ø–ª–∞—Ç–∞`
‚Ä¢ `500 –æ–±–µ–¥ –≤ –∫–∞—Ñ–µ`
"""
    
    await update.message.reply_text(help_text, parse_mode="Markdown")

async def sync_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        user_stats = tracker.get_user_stats(user_id)
        
        stats_text = "üîÑ *–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö*\n\n"
        stats_text += f"üí∞ *–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:* {user_stats['balance']:.2f} ‚ÇΩ\n\n"
        
        if user_stats['monthlyStats']['total_income'] > 0:
            stats_text += f"üìà *–î–æ—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü:* {user_stats['monthlyStats']['total_income']:.2f} ‚ÇΩ\n"
        
        if user_stats['monthlyStats']['total_expense'] > 0:
            stats_text += f"üìâ *–†–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü:* {user_stats['monthlyStats']['total_expense']:.2f} ‚ÇΩ\n"
            for category, amount in user_stats['monthlyStats']['expense'].items():
                stats_text += f"„ÄÄ‚Ä¢ {category}: {amount:.2f} ‚ÇΩ\n"
        
        if len(user_stats['recentTransactions']) > 0:
            stats_text += f"\nüìù *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:*\n"
            for transaction in user_stats['recentTransactions'][:5]:
                icon = "üí∞" if transaction['type'] == 'income' else "üí∏"
                stats_text += f"{icon} {transaction['amount']:.2f} ‚ÇΩ - {transaction['category']}\n"
        
        stats_text += f"\n‚úÖ *–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}*"
        
        await update.message.reply_text(stats_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App"""
    try:
        user_id = update.effective_user.id
        data = json.loads(update.effective_message.web_app_data.data)
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Web App: {data}")
        
        action = data.get('action')
        
        if action == 'get_data':
            # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            user_stats = tracker.get_user_stats(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ (–º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            stats_text = f"üìä *–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n"
            stats_text += f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_stats['balance']:.2f} ‚ÇΩ\n"
            stats_text += f"üìà –î–æ—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü: {user_stats['monthlyStats']['total_income']:.2f} ‚ÇΩ\n"
            stats_text += f"üìâ –†–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü: {user_stats['monthlyStats']['total_expense']:.2f} ‚ÇΩ\n"
            stats_text += f"üîÑ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!"
            
            await update.message.reply_text(stats_text, parse_mode="Markdown")
            
        elif action == 'add_transaction':
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ Web App –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            tracker.add_transaction(
                user_id=user_id,
                transaction_type=data['type'],
                amount=data['amount'],
                category=data['category'],
                description=data.get('description', '')
            )
            
            transaction_type_text = "–î–æ—Ö–æ–¥" if data['type'] == 'income' else "–†–∞—Å—Ö–æ–¥"
            await update.message.reply_text(
                f"‚úÖ {transaction_type_text} –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!\n\n"
                f"üí∞ {data['amount']:.2f} ‚ÇΩ\n"
                f"üìÇ {data['category']}\n"
                f"üìù {data.get('description', '')}"
            )
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ Web App: {action}")
            await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Web App –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

# API –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def api_get_user_data(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logger.info(f"API –∑–∞–ø—Ä–æ—Å get_user_data: {request.query}")
        
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        user_id = request.query.get('user_id')
        if not user_id:
            logger.warning("API –∑–∞–ø—Ä–æ—Å –±–µ–∑ user_id")
            return web.json_response({'error': 'user_id required'}, status=400)
        
        user_id = int(user_id)
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        user_data = tracker.get_user_stats(user_id)
        
        logger.info(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_data}")
        return web.json_response(user_data)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API get_user_data: {e}", exc_info=True)
        return web.json_response({'error': 'Internal server error'}, status=500)

async def api_add_transaction(request):
    """API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    try:
        logger.info("API –∑–∞–ø—Ä–æ—Å add_transaction")
        data = await request.json()
        logger.info(f"–î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {data}")
        
        user_id = data.get('user_id')
        transaction_type = data.get('type')
        amount = float(data.get('amount'))
        category = data.get('category')
        description = data.get('description', '')
        
        if not all([user_id, transaction_type, amount, category]):
            logger.warning(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {data}")
            return web.json_response({'error': 'Missing required fields'}, status=400)
        
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        tracker.add_transaction(user_id, transaction_type, amount, category, description)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_data = tracker.get_user_stats(user_id)
        logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return web.json_response({'success': True, 'data': user_data})
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API add_transaction: {e}", exc_info=True)
        return web.json_response({'error': 'Internal server error'}, status=500)

async def create_web_app():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è API"""
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è API")
    
    app = WebApplication()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
    cors = aiohttp_cors.setup(app, defaults={
        "*": aiohttp_cors.ResourceOptions(
            allow_credentials=True,
            expose_headers="*",
            allow_headers="*",
            allow_methods="*"
        )
    })
    
    # API –º–∞—Ä—à—Ä—É—Ç—ã
    app.router.add_get('/api/user-data', api_get_user_data)
    app.router.add_post('/api/add-transaction', api_add_transaction)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç
    async def health_check(request):
        logger.info("Health check –∑–∞–ø—Ä–æ—Å")
        return web.json_response({'status': 'ok', 'message': 'API —Ä–∞–±–æ—Ç–∞–µ—Ç'})
    
    app.router.add_get('/health', health_check)
    
    # –î–æ–±–∞–≤–ª—è–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
    for route in list(app.router.routes()):
        cors.add(route)
    
    logger.info("–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
    return app
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """
üìñ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*

*–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:*
1. –ù–∞–∂–º–∏ "üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥" –∏–ª–∏ "üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"
2. –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
3. –í–≤–µ–¥–∏ —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 1500 –∑–∞ –æ–±–µ–¥)

*–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:*
‚Ä¢ "üìä –ë–∞–ª–∞–Ω—Å" - —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
‚Ä¢ "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" - –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü

*–ü—Ä–∏–º–µ—Ä—ã –≤–≤–æ–¥–∞ —Å—É–º–º—ã:*
‚Ä¢ `1500`
‚Ä¢ `1500 –∑–∞—Ä–ø–ª–∞—Ç–∞`
‚Ä¢ `500 –æ–±–µ–¥ –≤ –∫–∞—Ñ–µ`
"""
    
    await update.message.reply_text(help_text, parse_mode="Markdown")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –µ—Å–ª–∏ –Ω–µ—Ç
    if user_id not in user_states:
        user_states[user_id] = {"state": "main"}
    
    state = user_states[user_id]["state"]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if text == "üîô –ù–∞–∑–∞–¥":
        user_states[user_id] = {"state": "main"}
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if state == "main":
        if text == "üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥":
            user_states[user_id] = {"state": "enter_income_amount"}
            await update.message.reply_text(
                "üí∞ –í–≤–µ–¥–∏ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
            )
            
        elif text == "üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥":
            user_states[user_id] = {"state": "select_expense_category"}
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:",
                reply_markup=get_category_keyboard("expense")
            )
            
        elif text == "üìä –ë–∞–ª–∞–Ω—Å":
            balance = tracker.get_user_balance(user_id)
            balance_text = f"üí∞ *–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:* {balance:.2f} ‚ÇΩ"
            
            if balance > 0:
                balance_text += " ‚úÖ"
            elif balance < 0:
                balance_text += " ‚ùå"
            else:
                balance_text += " ‚öñÔ∏è"
                
            await update.message.reply_text(balance_text, parse_mode="Markdown")
            
        elif text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            stats = tracker.get_monthly_stats(user_id)
            
            stats_text = "üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü:*\n\n"
            
            if stats["total_income"] > 0:
                stats_text += f"üí∞ *–î–æ—Ö–æ–¥—ã:* {stats['total_income']:.2f} ‚ÇΩ\n"
                for category, amount in stats["income"].items():
                    stats_text += f"  ‚Ä¢ {category}: {amount:.2f} ‚ÇΩ\n"
                stats_text += "\n"
            
            if stats["total_expense"] > 0:
                stats_text += f"üí∏ *–†–∞—Å—Ö–æ–¥—ã:* {stats['total_expense']:.2f} ‚ÇΩ\n"
                for category, amount in stats["expense"].items():
                    stats_text += f"  ‚Ä¢ {category}: {amount:.2f} ‚ÇΩ\n"
                stats_text += "\n"
            
            difference = stats["total_income"] - stats["total_expense"]
            stats_text += f"üìä *–†–∞–∑–Ω–∏—Ü–∞:* {difference:.2f} ‚ÇΩ"
            
            if difference > 0:
                stats_text += " ‚úÖ"
            elif difference < 0:
                stats_text += " ‚ùå"
            
            await update.message.reply_text(stats_text, parse_mode="Markdown")
            
        elif text == "‚ùì –ü–æ–º–æ—â—å":
            await help_command(update, context)
    
    # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞
    elif state == "select_expense_category":
        if text in EXPENSE_CATEGORIES:
            user_states[user_id] = {"state": "enter_expense_amount", "category": text}
            await update.message.reply_text(
                f"üí∏ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{text}*\n\n–í–≤–µ–¥–∏ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:",
                parse_mode="Markdown",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
            )
    
    # –í–≤–æ–¥ —Å—É–º–º—ã –¥–æ—Ö–æ–¥–∞ (–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
    elif state == "enter_income_amount":
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å—É–º–º—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è
            parts = text.split(maxsplit=1)
            amount = float(parts[0])
            description = parts[1] if len(parts) > 1 else ""
            
            tracker.add_transaction(user_id, "income", amount, "–î–æ—Ö–æ–¥", description)
            
            await update.message.reply_text(
                f"‚úÖ –î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüí∞ *{amount:.2f} ‚ÇΩ*\nüìù {description}",
                parse_mode="Markdown",
                reply_markup=get_main_keyboard()
            )
            user_states[user_id] = {"state": "main"}
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!\n\n–ü—Ä–∏–º–µ—Ä: `1500` –∏–ª–∏ `1500 –æ–ø–∏—Å–∞–Ω–∏–µ`",
                parse_mode="Markdown"
            )
    
    # –í–≤–æ–¥ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–∞
    elif state == "enter_expense_amount":
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å—É–º–º—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è
            parts = text.split(maxsplit=1)
            amount = float(parts[0])
            description = parts[1] if len(parts) > 1 else ""
            
            category = user_states[user_id]["category"]
            tracker.add_transaction(user_id, "expense", amount, category, description)
            
            await update.message.reply_text(
                f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüí∏ *{amount:.2f} ‚ÇΩ*\nüìÇ {category}\nüìù {description}",
                parse_mode="Markdown",
                reply_markup=get_main_keyboard()
            )
            user_states[user_id] = {"state": "main"}
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!\n\n–ü—Ä–∏–º–µ—Ä: `500` –∏–ª–∏ `500 –æ–±–µ–¥`",
                parse_mode="Markdown"
            )

async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App"""
    try:
        user_id = update.effective_user.id
        data = json.loads(update.effective_message.web_app_data.data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ Web App
        tracker.add_transaction(
            user_id=user_id,
            transaction_type=data['type'],
            amount=data['amount'],
            category=data['category'],
            description=data.get('description', '')
        )
        
        transaction_type_text = "–î–æ—Ö–æ–¥" if data['type'] == 'income' else "–†–∞—Å—Ö–æ–¥"
        await update.message.reply_text(
            f"‚úÖ {transaction_type_text} –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!\n\n"
            f"üí∞ {data['amount']:.2f} ‚ÇΩ\n"
            f"üìÇ {data['category']}\n"
            f"üìù {data.get('description', '')}"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Web App –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

import asyncio

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not BOT_TOKEN or BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ: BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–æ—Ç_BotFather")
        return
    
    async def start_bot_and_server():
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
        web_app = await create_web_app()
        runner = web.AppRunner(web_app)
        await runner.setup()
        site = web.TCPSite(runner, 'localhost', 8080)
        await site.start()
        print("üåê API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("sync", sync_command))
        application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_PATH}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await application.initialize()
        await application.start()
        await application.updater.start_polling()
        
        # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
        try:
            await asyncio.Future()  # –ñ–¥–µ–º –≤–µ—á–Ω–æ
        except KeyboardInterrupt:
            print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
        finally:
            await application.updater.stop()
            await application.stop()
            await application.shutdown()
            await runner.cleanup()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ
    asyncio.run(start_bot_and_server())

if __name__ == "__main__":
    main()